regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers:", outlier_rate, ", Regular Values:", regular_rate)))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers:", round(outlier_rate, 2), ", Regular Values:", regular_rate)))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2)))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
paste("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print(paste("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2)))
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2)))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2)))
}
outlier_col = c("BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction")
for (col in outlier_col) {
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return rates
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return rates
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
}
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return (rates)
}
for (col in colnames(diabetes)) {
rates <- calculate_rate(diabetes[, col])
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rate$regular)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$outlier, 2)))
}
for (col in colnames(diabetes)) {
rates <- calculate_rate(diabetes[, col])
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$outlier, 2)))
}
outlier_col = c("BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction")
for (col in outlier_col) {
rates <- calculate_rate(diabetes[, col])
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$regular, 2))))
}
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Descriptive Analysis of Pregnancy")
# Boxplot cho Outcome và Glucose theo người mắc bệnh và không
diabetes_groups <- cut(diabetes$Outcome, c(-Inf, 0, Inf), labels = c("Không bệnh", "Bệnh"))
ggplot(data = diabetes, aes(x = diabetes_groups, y = Glucose)) +
geom_boxplot(fill = c("lightblue", "green")) +
labs(x = "Outcome", y = "Glucose (mg/dL)")
# Calculate the correlation between DiabetesPedigreeFunction and BMI
cor(diabetes$DiabetesPedigreeFunction, diabetes$BMI)
# 0.22
matrix <- as.matrix(diabetes)
heatmap((matrix))
ggplot(data = diabetes, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = diabetes, aes(x=DiabetesPedigreeFunction, y=BMI, fill=Outcome)) +
geom_tile()
ggplot(data = diabetes, aes(x=DiabetesPedigreeFunction, y=BMI, fill=Outcome)) + geom_tile()
ggplot(data = diabetes, aes(x=DiabetesPedigreeFunction, y=Age, fill=Outcome)) + geom_tile()
install.packages("lattice")
libray(lattice)
library(lattice)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
install.packages("reshape2")
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")+
geom_point()
library(reader)
diabetes <- read.csv('diabetes.csv')
diabetes
library(ggplot2)
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")+
geom_point()
ggplot(data = diabetes, aes(x = Glucose)) +
geom_histogram()
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")
ggplot(data = diabetes, aes(x = Glucose)) +
geom_histogram()
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")
plot(density(diabetes$Glucose),
col="yellow",
main="Density Plot for Glucose",
xlab="Glucose",
ylab="Density")
polygon(density(diabetes$Glucose),
col="#ccff66")
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
diabetes
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Education/Uni/Statistic with R/Final_Project/R-diabetes")
wine <- read.csv("winequality.csv", header = TRUE, sep=",")
head(wine)
dim(wine)
barplot(table(wine$quality))
wine$taste <- ifelse(wine$quality < 5, "bad", "good")
wine$taste[wine$quality == 5] <- "normal"
wine$taste[wine$quality == 6] <- "normal"
wine$taste <- as.factor(wine$taste)
str(wine$taste)
wine <- read.csv("winequality.csv", header = TRUE, sep=",")
head(wine)
dim(wine)
wine$taste <- ifelse(wine$quality < 5, "bad", "good")
wine$taste[wine$quality == 5] <- "normal"
wine$taste[wine$quality == 6] <- "normal"
wine$taste <- as.factor(wine$taste)
str(wine$taste)
head(wine)
dim(wine)
barplot(table(wine$taste))
table(wine$taste)
set.seed(123)
samp <- sample(nrow(wine), 0.8 * nrow(wine))
train <- wine[samp, ]
test <- wine[-samp, ]
library(ggplot2)
ggplot(wine,aes(fixed.acidity,volatile.acidity))+ geom_point(aes(color=taste))
ggplot(wine,aes(alcohol)) + geom_histogram(aes(fill=taste),color='black',bins=50)
dim(test)
library(randomForest)
install.packages('randomForest')
library(randomForest)
model <- randomForest(taste ~ . - quality, data = train, ntree = 1000, mtry = 5)
model
model$confusion
model <- randomForest(taste ~ . - quality, data = train, ntree = 1000, mtry = 5)
model
prediction <- predict(model, newdata = test)
table(prediction, test$taste)
prediction
results<-cbind(prediction,test$taste)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$taste) / nrow(test) # The output is as shown below
setwd("C:/Education/Uni/Statistic with R/Final_Project/R-diabetes")
wine <- read.csv("diabetes.csv", header = TRUE, sep=",")
head(diabetes)
dim(diabetes)
setwd("C:/Education/Uni/Statistic with R/Final_Project/R-diabetes")
diabetes <- read.csv("diabetes.csv")
head(diabetes)
dim(diabetes)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
library(ggplot2)
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 5)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$taste) / nrow(test) # The output is as shown below
sum(prediction==test$taste) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 900, mtry = 5)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 500, mtry = 5)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 500, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 500, mtry = 4)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 2)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 5, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
renv::init()
knitr::opts_chunk$set(echo = TRUE)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
outlier_col = c("BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction")
pie_outlier <- function(outlier_col) {for (col in outlier_col) {
rates <- calculate_rate(unlist(diabetes[, col]))
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
return(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste(col),
caption = paste0("Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$regular, 2))))
}}
outlier_col = c("BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction")
pie_outlier <- function(outlier_col) {for (col in outlier_col) {
rates <- calculate_rate(unlist(diabetes[, col]))
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
return(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste(col),
caption = paste0("Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$regular, 2))))
}}
grid.arrange(pie_outlier("BloodPressure"), pie_outlier("Insulin"), pie_outlier("BMI"), pie_outlier("DiabetesPedigreeFunction"), ncol=2)
grid.arrange(pie_outlier("BloodPressure"), pie_outlier("Insulin"), pie_outlier("BMI"), pie_outlier("DiabetesPedigreeFunction"), ncol=2)
pie_outlier <- function(outlier_col) {for (col in outlier_col) {
rates <- calculate_rate(unlist(diabetes[, col]))
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
return(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste(col),
caption = paste0("Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$regular, 2))))
}}
grid.arrange(pie_outlier("BloodPressure"), pie_outlier("Insulin"), pie_outlier("BMI"), pie_outlier("DiabetesPedigreeFunction"), ncol=2)
grid.arrange(pie_outlier("BloodPressure"), pie_outlier("Insulin"), pie_outlier("BMI"),pie_outlier("DiabetesPedigreeFunction"), ncol=2)
install.packages('gridExtra)
install.packages('gridExtra)
install.packages('gridExtra')
